diff -ruN boost_1_52_0/tools/build/v2/tools/python.jam _boost_1_52_0/tools/build/v2/tools/python.jam
--- boost_1_52_0/tools/build/v2/tools/python.jam	2012-04-25 23:35:55 -0400
+++ _boost_1_52_0/tools/build/v2/tools/python.jam	2013-01-31 12:29:20 -0500
@@ -476,15 +476,6 @@
             exprs += $(s) ;
         }
 
-        # Invoke Python and ask it for all those values.
-        if [ version.check-jam-version 3 1 17 ] || ( [ os.name ] != NT )
-        {
-            # Prior to version 3.1.17 Boost Jam's SHELL command did not support
-            # quoted commands correctly on Windows. This means that on that
-            # platform we do not support using a Python command interpreter
-            # executable whose path contains a space character.
-            python-cmd = \"$(python-cmd)\" ;
-        }
         local full-cmd =
             $(python-cmd)" -c \"from sys import *; print('"$(format:J=\\n)"' % ("$(exprs:J=,)"))\"" ;
 
@@ -513,14 +504,19 @@
 local rule compute-default-paths ( target-os : version ? : prefix ? :
     exec-prefix ? )
 {
+    debug-message TOOLSET DEFAULT PATH= $(toolset) ;
+
     exec-prefix ?= $(prefix) ;
 
-    if $(target-os) = windows
-    {
+    # Just hack this out for now. It's obviously not a fix but we need the python
+    # libraries for mingw to build.
+    #
+    #if $(target-os) = windows
+    #{
         # The exec_prefix is where you're supposed to look for machine-specific
         # libraries.
-        local default-library-path = $(exec-prefix)\\libs ;
-        local default-include-path = $(:E=Include:R=$(prefix)) ;
+    #    local default-library-path = $(exec-prefix)\\libs ;
+    #    local default-include-path = $(:E=Include:R=$(prefix)) ;
 
         # If the interpreter was found in a directory called "PCBuild" or
         # "PCBuild8," assume we're looking at a Python built from the source
@@ -529,30 +525,30 @@
 
         # We ask Python itself what the executable path is in case of
         # intermediate symlinks or shell scripts.
-        local executable-dir = $(sys.executable:D) ;
+    #    local executable-dir = $(sys.executable:D) ;
 
-        if [ MATCH ^(PCBuild) : $(executable-dir:D=) ]
-        {
-            debug-message "This Python appears to reside in a source distribution;" ;
-            debug-message "prepending \""$(executable-dir)"\" to default library search path" ;
+    #    if [ MATCH ^(PCBuild) : $(executable-dir:D=) ]
+    #    {
+    #        debug-message "This Python appears to reside in a source distribution;" ;
+    #        debug-message "prepending \""$(executable-dir)"\" to default library search path" ;
 
-            default-library-path = $(executable-dir) $(default-library-path) ;
+    #        default-library-path = $(executable-dir) $(default-library-path) ;
 
-            default-include-path = $(:E=PC:R=$(executable-dir:D)) $(default-include-path) ;
+    #        default-include-path = $(:E=PC:R=$(executable-dir:D)) $(default-include-path) ;
 
-            debug-message "and \""$(default-include-path[1])"\" to default #include path" ;
-        }
+    #        debug-message "and \""$(default-include-path[1])"\" to default #include path" ;
+    #    }
 
-        libraries ?= $(default-library-path) ;
-        includes ?= $(default-include-path) ;
-    }
-    else
-    {
+    #    libraries ?= $(default-library-path) ;
+    #    includes ?= $(default-include-path) ;
+    #}
+    #else
+    #{
         includes ?= $(prefix)/include/python$(version) ;
 
         local lib = $(exec-prefix)/lib ;
         libraries ?= $(lib)/python$(version)/config $(lib) ;
-    }
+    #}
 }
 
 # The version of the python interpreter to use.
@@ -670,7 +666,7 @@
     if <target-os>windows in $(requirements)
     {
         local major-minor = [ split-version $(version) ] ;
-        lib-version = $(major-minor:J="") ;
+        lib-version = $(major-minor:J=".") ;
         if <python-debugging>on in $(requirements)
         {
             lib-version = $(lib-version)_d ;