diff -ruN cpio-2.11/gnu/sys_stat.in.h cpio-2.11-updates/gnu/sys_stat.in.h
--- cpio-2.11/gnu/sys_stat.in.h	2010-03-10 04:27:04 -0500
+++ cpio-2.11-updates/gnu/sys_stat.in.h	2014-06-12 13:34:24 -0400
@@ -58,9 +58,19 @@
 /* Before doing "#define mkdir rpl_mkdir" below, we need to include all
    headers that may declare mkdir().  */
 #if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+# include <io.h>     /* mingw32, mingw64 */
+# include <direct.h> /* mingw64, MSVC 9 */
+#endif
+
+/* Native Windows platforms declare umask() in <io.h>.  */
+#if 0 && ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__)
 # include <io.h>
 #endif
 
+#if 1
+# define stat _stati64
+#endif
+
 #ifndef S_IFMT
 # define S_IFMT 0170000
 #endif
@@ -312,8 +322,9 @@
 #endif
 
 
-#if @REPLACE_FSTAT@
+#if 0
 # if !(defined __cplusplus && defined GNULIB_NAMESPACE)
+#   undef fstat
 #  define fstat rpl_fstat
 # endif
 _GL_FUNCDECL_RPL (fstat, int, (int fd, struct stat *buf) _GL_ARG_NONNULL ((2)));
@@ -324,7 +335,7 @@
 _GL_CXXALIASWARN (fstat);
 
 
-#if @GNULIB_FSTATAT@
+#if 0
 # if @REPLACE_FSTATAT@
 #  if !(defined __cplusplus && defined GNULIB_NAMESPACE)
 #   undef fstatat
diff -ruN cpio-2.11/gnu//readlink.c cpio-2.11_old/gnu//readlink.c
--- cpio-2.11/gnu//readlink.c	1969-12-31 19:00:00 -0500
+++ cpio-2.11_old/gnu//readlink.c	2014-06-05 21:15:32 -0400
@@ -0,0 +1,74 @@
+/* Stub for readlink().
+   Copyright (C) 2003-2007, 2009-2014 Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include <config.h>
+
+/* Specification.  */
+#include <unistd.h>
+
+#include <errno.h>
+#include <string.h>
+#include <sys/stat.h>
+
+#if !HAVE_READLINK
+
+/* readlink() substitute for systems that don't have a readlink() function,
+   such as DJGPP 2.03 and mingw32.  */
+
+ssize_t
+readlink (const char *name, char *buf _GL_UNUSED,
+          size_t bufsize _GL_UNUSED)
+{
+  struct stat statbuf;
+
+  /* In general we should use lstat() here, not stat().  But on platforms
+     without symbolic links, lstat() - if it exists - would be equivalent to
+     stat(), therefore we can use stat().  This saves us a configure check.  */
+  if (stat (name, &statbuf) >= 0)
+    errno = EINVAL;
+  return -1;
+}
+
+#else /* HAVE_READLINK */
+
+# undef readlink
+
+/* readlink() wrapper that uses correct types, for systems like cygwin
+   1.5.x where readlink returns int, and which rejects trailing slash,
+   for Solaris 9.  */
+
+ssize_t
+rpl_readlink (const char *name, char *buf, size_t bufsize)
+{
+# if READLINK_TRAILING_SLASH_BUG
+  size_t len = strlen (name);
+  if (len && name[len - 1] == '/')
+    {
+      /* Even if name without the slash is a symlink to a directory,
+         both lstat() and stat() must resolve the trailing slash to
+         the directory rather than the symlink.  We can therefore
+         safely use stat() to distinguish between EINVAL and
+         ENOTDIR/ENOENT, avoiding extra overhead of rpl_lstat().  */
+      struct stat st;
+      if (stat (name, &st) == 0)
+        errno = EINVAL;
+      return -1;
+    }
+# endif /* READLINK_TRAILING_SLASH_BUG */
+  return readlink (name, buf, bufsize);
+}
+
+#endif /* HAVE_READLINK */ 
diff -ruN cpio-2.11/m4/gnulib-comp.m4 cpio-2.11-updates/m4/gnulib-comp.m4
--- cpio-2.11/m4/gnulib-comp.m4	2010-03-10 04:27:08 -0500
+++ cpio-2.11-updates/m4/gnulib-comp.m4	2014-06-12 17:32:31 -0400
@@ -163,6 +163,8 @@
   gl_QUOTEARG
   gl_FUNC_RAWMEMCHR
   gl_STRING_MODULE_INDICATOR([rawmemchr])
+  gl_FUNC_READLINK
+  gl_STDLIB_MODULE_INDICATOR([readlink])
   gl_FUNC_REALLOC_POSIX
   gl_STDLIB_MODULE_INDICATOR([realloc-posix])
   gl_FUNC_RMDIR
@@ -503,6 +505,7 @@
   lib/quotearg.h
   lib/rawmemchr.c
   lib/rawmemchr.valgrind
+  lib/readlink.c
   lib/realloc.c
   lib/ref-add.sin
   lib/ref-del.sin
@@ -679,6 +682,7 @@
   m4/quote.m4
   m4/quotearg.m4
   m4/rawmemchr.m4
+  m4/readlink.m4
   m4/realloc.m4
   m4/rmdir.m4
   m4/safe-read.m4
diff -ruN cpio-2.11/m4/readlink.m4 cpio-2.11-updates/m4/readlink.m4
--- cpio-2.11/m4/readlink.m4	1969-12-31 19:00:00 -0500
+++ cpio-2.11-updates/m4/readlink.m4	2014-06-13 09:54:21 -0400
@@ -0,0 +1,72 @@
+# readlink.m4 serial 12
+dnl Copyright (C) 2003, 2007, 2009-2014 Free Software Foundation, Inc.
+dnl This file is free software; the Free Software Foundation
+dnl gives unlimited permission to copy and/or distribute it,
+dnl with or without modifications, as long as this notice is preserved.
+
+AC_DEFUN([gl_FUNC_READLINK],
+[
+  AC_REQUIRE([gl_UNISTD_H_DEFAULTS])
+  AC_REQUIRE([AC_CANONICAL_HOST]) dnl for cross-compiles
+  AC_CHECK_FUNCS_ONCE([readlink])
+  if test $ac_cv_func_readlink = no; then
+    HAVE_READLINK=0
+    AC_LIBOBJ([readlink])
+  else
+    AC_CACHE_CHECK([whether readlink signature is correct],
+      [gl_cv_decl_readlink_works],
+      [AC_COMPILE_IFELSE(
+         [AC_LANG_PROGRAM(
+           [[#include <unistd.h>
+      /* Cause compilation failure if original declaration has wrong type.  */
+      ssize_t readlink (const char *, char *, size_t);]])],
+         [gl_cv_decl_readlink_works=yes], [gl_cv_decl_readlink_works=no])])
+    dnl Solaris 9 ignores trailing slash.
+    dnl FreeBSD 7.2 dereferences only one level of links with trailing slash.
+    AC_CACHE_CHECK([whether readlink handles trailing slash correctly],
+      [gl_cv_func_readlink_works],
+      [# We have readlink, so assume ln -s works.
+       ln -s conftest.no-such conftest.link
+       ln -s conftest.link conftest.lnk2
+       AC_RUN_IFELSE(
+         [AC_LANG_PROGRAM(
+           [[#include <unistd.h>
+]], [[char buf[20];
+      return readlink ("conftest.lnk2/", buf, sizeof buf) != -1;]])],
+         [gl_cv_func_readlink_works=yes], [gl_cv_func_readlink_works=no],
+         [case "$host_os" in
+                    # Guess yes on glibc systems.
+            *-gnu*) gl_cv_func_readlink_works="guessing yes" ;;
+                    # If we don't know, assume the worst.
+            *)      gl_cv_func_readlink_works="guessing no" ;;
+          esac
+         ])
+      rm -f conftest.link conftest.lnk2])
+    case "$gl_cv_func_readlink_works" in
+      *yes)
+        if test "$gl_cv_decl_readlink_works" != yes; then
+          REPLACE_READLINK=1
+        fi
+        ;;
+      *)
+        AC_DEFINE([READLINK_TRAILING_SLASH_BUG], [1], [Define to 1 if readlink
+          fails to recognize a trailing slash.])
+        REPLACE_READLINK=1
+        ;;
+    esac
+  fi
+])
+
+# Like gl_FUNC_READLINK, except prepare for separate compilation
+# (no REPLACE_READLINK, no AC_LIBOBJ).
+AC_DEFUN([gl_FUNC_READLINK_SEPARATE],
+[
+  AC_CHECK_FUNCS_ONCE([readlink])
+  gl_PREREQ_READLINK
+])
+
+# Prerequisites of lib/readlink.c.
+AC_DEFUN([gl_PREREQ_READLINK],
+[
+  :
+])
diff -u cpio-2.11/src/cpiohdr.h cpio-2.11/src/cpiohdr.h.update
--- cpio-2.11/src/cpiohdr.h     2010-02-12 05:19:24 -0500
+++ cpio-2.11/src/cpiohdr.h.update      2014-06-13 14:45:31 -0400
@@ -24,6 +24,8 @@

 #ifdef HAVE_ATTRIB_PACKED
 #define ATTRIB_PACKED __attribute__((packed))
+#else
+#define ATTRIB_PACKED
 #endif

 #ifdef HAVE_PRAGMA_PACK
diff -ruN cpio-2.11/src/filetypes.h cpio-2.11-updates/src/filetypes.h
--- cpio-2.11/src/filetypes.h	2010-02-12 05:19:24 -0500
+++ cpio-2.11-updates/src/filetypes.h	2014-06-11 17:51:01 -0400
@@ -81,5 +81,5 @@
 #ifndef S_ISLNK
 #define lstat stat
 #endif
-int lstat ();
-int stat ();
+//int lstat ();
+//int stat ();
