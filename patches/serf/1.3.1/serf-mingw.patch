--- serf-1.3.1/SConstruct	2013-08-15 05:13:20 -0400
+++ serf-1.3.1/SConstruct2	2013-09-19 12:55:53 -0400
@@ -18,6 +18,9 @@
 import sys
 import os
 import re
+import sysconfig
+from SCons import Platform
+from SCons.Node import FS
 
 EnsureSConsVersion(2,3,0)
 
@@ -29,6 +32,11 @@
 # where we save the configuration variables
 SAVED_CONFIG = '.saved_config'
 
+mingwbuild=False
+if (sys.platform == "win32" and sys.version.upper().find('GCC') >= 0):
+    if sysconfig.get_config_var('CFLAGS').find('MINGW')>=0:
+        mingwbuild=True
+
 # Variable class that does no validation on the input
 def _converter(val):
     """
@@ -58,7 +66,7 @@
   return my_validator
 
 # default directories
-if sys.platform == 'win32':
+if sys.platform == 'win32' and not mingwbuild:
   default_incdir='..'
   default_libdir='..'
   default_prefix='Debug'
@@ -114,7 +122,7 @@
                   "(space separated)", None), 
   )
 
-if sys.platform == 'win32':
+if sys.platform == 'win32' and not mingwbuild:
   opts.AddVariables(
     # By default SCons builds for the host platform on Windows, when using
     # a supported compiler (E.g. VS2010/VS2012). Allow overriding
@@ -146,10 +154,15 @@
                  True),
     )
 
-env = Environment(variables=opts,
-                  tools=('default', 'textfile',),
-                  CPPPATH=['.', ],
-                  )
+if mingwbuild:
+    sys.path.append('mingw')
+    import mingw64
+    env = Environment(platform = Platform.PlatformSpec('mingw64', mingw64.generate), variables=opts, tools = ['mingw', 'textfile'], ENV = os.environ, CPPPATH=['.', ])
+else:
+    env = Environment(variables=opts,
+                      tools=('default', 'textfile',),
+                      CPPPATH=['.', ],
+                      )
 
 env.Append(BUILDERS = {
     'GenDef' : 
@@ -204,12 +217,11 @@
 libdir = '$LIBDIR'
 incdir = '$PREFIX/include/serf-$MAJOR'
 
-env['SHLIBVERSION']='${MINOR}.0.0'
-
-LIBNAME = 'libserf-${MAJOR}'
-if sys.platform != 'win32':
+LIBNAME = 'serf-${MAJOR}'
+if sys.platform != 'win32' or mingwbuild:
   LIBNAMESTATIC = LIBNAME
 else:
+  env['SHLIBVERSION']='${MINOR}.0.0'
   LIBNAMESTATIC = 'serf-${MAJOR}'
 
 env.Append(RPATH=libdir,
@@ -223,7 +235,7 @@
   env.Append(LINKFLAGS='-Wl,-compatibility_version,%d' % (MINOR+1,))
   env.Append(LINKFLAGS='-Wl,-current_version,%d.%d' % (MINOR+1, PATCH,))
 
-if sys.platform != 'win32':
+if sys.platform != 'win32' or mingwbuild:
   ### gcc only. figure out appropriate test / better way to check these
   ### flags, and check for gcc.
   env.Append(CFLAGS='-std=c89')
@@ -262,19 +274,22 @@
 
 # PLAN THE BUILD
 SHARED_SOURCES = []
-if sys.platform == 'win32':
+if sys.platform == 'win32' and not mingwbuild:
   env.GenDef(['serf.h','serf_bucket_types.h', 'serf_bucket_util.h'])
   SHARED_SOURCES.append(['serf.def'])
 
 SOURCES = Glob('*.c') + Glob('buckets/*.c') + Glob('auth/*.c')
 
 lib_static = env.StaticLibrary(LIBNAMESTATIC, SOURCES)
-lib_shared = env.SharedLibrary(LIBNAME, SOURCES + SHARED_SOURCES)
+lib_shared = env.SharedLibrary(LIBNAME, SOURCES + SHARED_SOURCES,SHLIBPREFIX='lib',LIBSUFFIX='.dll.a')
 
 if aprstatic:
   env.Append(CPPDEFINES=['APR_DECLARE_STATIC', 'APU_DECLARE_STATIC'])
-
-if sys.platform == 'win32':
+  
+if mingwbuild:
+  env.Append(LIBS=['secur32'])  
+  
+if sys.platform == 'win32' and not mingwbuild:
   env.Append(LIBS=['user32.lib', 'advapi32.lib', 'gdi32.lib', 'ws2_32.lib',
                    'crypt32.lib', 'mswsock.lib', 'rpcrt4.lib', 'secur32.lib'])
 
@@ -286,11 +301,11 @@
     env.Append(CPPDEFINES=['WIN64'])
 
   if aprstatic:
-    apr_libs='apr-1.lib'
-    apu_libs='aprutil-1.lib'
+      apr_libs='apr-1.lib'
+      apu_libs='aprutil-1.lib'
   else:
-    apr_libs='libapr-1.lib'
-    apu_libs='libaprutil-1.lib'
+      apr_libs='libapr-1.lib'
+      apu_libs='libaprutil-1.lib'
 
   env.Append(LIBS=[apr_libs, apu_libs])
   if not env.get('SOURCE_LAYOUT', None):
@@ -331,13 +346,19 @@
     apu = os.path.join(apu, 'bin', 'apu-1-config')
     env['APU'] = apu
 
+
   ### we should use --cc, but that is giving some scons error about an implict
   ### dependency upon gcc. probably ParseConfig doesn't know what to do with
   ### the apr-1-config output
   if CALLOUT_OKAY:
-    env.ParseConfig('$APR --cflags --cppflags --ldflags --includes'
-                    ' --link-ld --libs')
-    env.ParseConfig('$APU --ldflags --includes --link-ld --libs')
+      if mingwbuild:
+          cmd = ['bash.exe', '-c', '\'apu-1-config --ldflags --includes --link-ld --libs\'']
+          env.ParseConfig(cmd)
+          cmd = ['bash.exe', '-c', '\'apr-1-config --cflags --cppflags --ldflags --includes --link-ld --libs\'']
+          env.ParseConfig(cmd)
+      else:
+          env.ParseConfig('%s --cflags --cppflags --ldflags --includes --link-ld --libs' % apr)
+          env.ParseConfig('%s --ldflags --includes --link-ld --libs' % apu)
 
   ### there is probably a better way to run/capture output.
   ### env.ParseConfig() may be handy for getting this stuff into the build
