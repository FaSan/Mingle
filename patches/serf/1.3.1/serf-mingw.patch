--- serf-1.3.1/SConstruct	2013-08-15 05:13:20 -0400
+++ serf-1.3.1/SConstruct2	2013-09-19 12:55:53 -0400
@@ -18,6 +18,9 @@
 import sys
 import os
 import re
+import sysconfig
+from SCons import Platform
+from SCons.Node import FS
 
 EnsureSConsVersion(2,3,0)
 
@@ -29,6 +32,11 @@
 # where we save the configuration variables
 SAVED_CONFIG = '.saved_config'
 
+mingwbuild=False
+if (sys.platform == "win32" and sys.version.upper().find('GCC') >= 0):
+    if sysconfig.get_config_var('CFLAGS').find('MINGW')>=0:
+        mingwbuild=True
+
 # Variable class that does no validation on the input
 def _converter(val):
     """
@@ -58,7 +66,7 @@
   return my_validator
 
 # default directories
-if sys.platform == 'win32':
+if sys.platform == 'win32' and not mingwbuild:
   default_incdir='..'
   default_libdir='..'
   default_prefix='Debug'
@@ -114,7 +122,7 @@
                   "(space separated)", None), 
   )
 
-if sys.platform == 'win32':
+if sys.platform == 'win32' and not mingwbuild:
   opts.AddVariables(
     # By default SCons builds for the host platform on Windows, when using
     # a supported compiler (E.g. VS2010/VS2012). Allow overriding
@@ -146,10 +154,15 @@
                  True),
     )
 
-env = Environment(variables=opts,
-                  tools=('default', 'textfile',),
-                  CPPPATH=['.', ],
-                  )
+if mingwbuild:
+    sys.path.append('mingw')
+    import mingw64
+    env = Environment(platform = Platform.PlatformSpec('mingw64', mingw64.generate), variables=opts, tools = ['mingw', 'textfile'], ENV = os.environ, CPPPATH=['.', ])
+else:
+    env = Environment(variables=opts,
+                      tools=('default', 'textfile',),
+                      CPPPATH=['.', ],
+                      )
 
 env.Append(BUILDERS = {
     'GenDef' : 
@@ -204,12 +217,11 @@
 libdir = '$LIBDIR'
 incdir = '$PREFIX/include/serf-$MAJOR'
 
-env['SHLIBVERSION']='${MINOR}.0.0'
-
-LIBNAME = 'libserf-${MAJOR}'
-if sys.platform != 'win32':
+LIBNAME = 'serf-${MAJOR}'
+if sys.platform != 'win32' or mingwbuild:
   LIBNAMESTATIC = LIBNAME
 else:
+  env['SHLIBVERSION']='${MINOR}.0.0'
   LIBNAMESTATIC = 'serf-${MAJOR}'
 
 env.Append(RPATH=libdir,
@@ -223,7 +235,7 @@
   env.Append(LINKFLAGS='-Wl,-compatibility_version,%d' % (MINOR+1,))
   env.Append(LINKFLAGS='-Wl,-current_version,%d.%d' % (MINOR+1, PATCH,))
 
-if sys.platform != 'win32':
+if sys.platform != 'win32' or mingwbuild:
   ### gcc only. figure out appropriate test / better way to check these
   ### flags, and check for gcc.
   env.Append(CFLAGS='-std=c89')
@@ -262,19 +274,22 @@
 
 # PLAN THE BUILD
 SHARED_SOURCES = []
-if sys.platform == 'win32':
+if sys.platform == 'win32' and not mingwbuild:
   env.GenDef(['serf.h','serf_bucket_types.h', 'serf_bucket_util.h'])
   SHARED_SOURCES.append(['serf.def'])
 
 SOURCES = Glob('*.c') + Glob('buckets/*.c') + Glob('auth/*.c')
 
 lib_static = env.StaticLibrary(LIBNAMESTATIC, SOURCES)
-lib_shared = env.SharedLibrary(LIBNAME, SOURCES + SHARED_SOURCES)
+lib_shared = env.SharedLibrary(LIBNAME, SOURCES + SHARED_SOURCES,SHLIBPREFIX='lib',LIBSUFFIX='.dll.a')
 
 if aprstatic:
   env.Append(CPPDEFINES=['APR_DECLARE_STATIC', 'APU_DECLARE_STATIC'])
-
-if sys.platform == 'win32':
+  
+if mingwbuild:
+  env.Append(LIBS=['secur32'])  
+  
+if sys.platform == 'win32' and not mingwbuild:
   env.Append(LIBS=['user32.lib', 'advapi32.lib', 'gdi32.lib', 'ws2_32.lib',
                    'crypt32.lib', 'mswsock.lib', 'rpcrt4.lib', 'secur32.lib'])
 
@@ -286,11 +301,11 @@
     env.Append(CPPDEFINES=['WIN64'])
 
   if aprstatic:
-    apr_libs='apr-1.lib'
-    apu_libs='aprutil-1.lib'
+      apr_libs='apr-1.lib'
+      apu_libs='aprutil-1.lib'
   else:
-    apr_libs='libapr-1.lib'
-    apu_libs='libaprutil-1.lib'
+      apr_libs='libapr-1.lib'
+      apu_libs='libaprutil-1.lib'
 
   env.Append(LIBS=[apr_libs, apu_libs])
   if not env.get('SOURCE_LAYOUT', None):
@@ -331,13 +346,19 @@
     apu = os.path.join(apu, 'bin', 'apu-1-config')
     env['APU'] = apu
 
+
   ### we should use --cc, but that is giving some scons error about an implict
   ### dependency upon gcc. probably ParseConfig doesn't know what to do with
   ### the apr-1-config output
   if CALLOUT_OKAY:
-    env.ParseConfig('$APR --cflags --cppflags --ldflags --includes'
-                    ' --link-ld --libs')
-    env.ParseConfig('$APU --ldflags --includes --link-ld --libs')
+      if mingwbuild:
+          cmd = ['bash.exe', '-c', '\'apu-1-config --ldflags --includes --link-ld --libs\'']
+          env.ParseConfig(cmd)
+          cmd = ['bash.exe', '-c', '\'apr-1-config --cflags --cppflags --ldflags --includes --link-ld --libs\'']
+          env.ParseConfig(cmd)
+      else:
+          env.ParseConfig('%s --cflags --cppflags --ldflags --includes --link-ld --libs' % apr)
+          env.ParseConfig('%s --ldflags --includes --link-ld --libs' % apu)
 
   ### there is probably a better way to run/capture output.
   ### env.ParseConfig() may be handy for getting this stuff into the build
diff -urN serf-1.3.1/mingw/mingw-shell-adapter.py serf-1.3.1-2//mingw/mingw-shell-adapter.py
--- serf-1.3.1/mingw/mingw-shell-adapter.py	1969-12-31 19:00:00 -0500
+++ serf-1.3.1-2//mingw/mingw-shell-adapter.py	2013-10-27 21:37:16 -0400
@@ -0,0 +1,17 @@
+import subprocess, sys
+
+command=['bash.exe', '-c']
+command.append(" ".join(map(str, sys.argv[1:])))
+
+if len(command)>2:
+    try:
+        p = subprocess.Popen(command, stdout=subprocess.PIPE)
+        out, err = p.communicate()
+
+        san = out.replace("\\", "/")
+
+        sys.stdout.write(san)
+    except Exception, e:
+        sys.exit(1)
+
+sys.exit(p.returncode)
diff -urN serf-1.3.1/mingw/mingw64.py serf-1.3.1-2//mingw/mingw64.py
--- serf-1.3.1/mingw/mingw64.py	1969-12-31 19:00:00 -0500
+++ serf-1.3.1-2//mingw/mingw64.py	2013-10-27 21:36:41 -0400
@@ -0,0 +1,291 @@
+"""SCons.Platform.win32
+
+Platform-specific initialization for Win32 systems.
+
+There normally shouldn't be any need to import this module directly.  It
+will usually be imported through the generic SCons.Platform.Platform()
+selection method.
+"""
+
+#
+# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 The SCons Foundation
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "src/engine/SCons/Platform/win32.py issue-2856:2676:d23b7a2f45e8 2012/08/05 15:38:28 garyo"
+
+import os
+import os.path
+import sys
+import tempfile
+
+from SCons.Platform.posix import exitvalmap
+from SCons.Platform import TempFileMunge
+import SCons.Util
+
+try:
+    import msvcrt
+    import win32api
+    import win32con
+
+    msvcrt.get_osfhandle
+    win32api.SetHandleInformation
+    win32con.HANDLE_FLAG_INHERIT
+except ImportError:
+    parallel_msg = \
+        "you do not seem to have the pywin32 extensions installed;\n" + \
+        "\tparallel (-j) builds may not work reliably with open Python files."
+except AttributeError:
+    parallel_msg = \
+        "your pywin32 extensions do not support file handle operations;\n" + \
+        "\tparallel (-j) builds may not work reliably with open Python files."
+else:
+    parallel_msg = None
+
+    import builtins
+
+    _builtin_file = builtins.file
+    _builtin_open = builtins.open
+
+    class _scons_file(_builtin_file):
+        def __init__(self, *args, **kw):
+            _builtin_file.__init__(self, *args, **kw)
+            win32api.SetHandleInformation(msvcrt.get_osfhandle(self.fileno()),
+                win32con.HANDLE_FLAG_INHERIT, 0)
+
+    def _scons_open(*args, **kw):
+        fp = _builtin_open(*args, **kw)
+        win32api.SetHandleInformation(msvcrt.get_osfhandle(fp.fileno()),
+                                      win32con.HANDLE_FLAG_INHERIT,
+                                      0)
+        return fp
+
+    builtins.file = _scons_file
+    builtins.open = _scons_open
+
+
+
+# The upshot of all this is that, if you are using Python 1.5.2,
+# you had better have cmd or command.com in your PATH when you run
+# scons.
+
+def piped_spawn(sh, escape, cmd, args, env, stdout, stderr):
+    # There is no direct way to do that in python. What we do
+    # here should work for most cases:
+    #   In case stdout (stderr) is not redirected to a file,
+    #   we redirect it into a temporary file tmpFileStdout
+    #   (tmpFileStderr) and copy the contents of this file
+    #   to stdout (stderr) given in the argument
+    if not sh:
+        sys.stderr.write("scons: Could not find command interpreter, is it in your PATH?\n")
+        return 127
+    else:
+        # one temporary file for stdout and stderr
+        tmpFileStdout = os.path.normpath(tempfile.mktemp())
+        tmpFileStderr = os.path.normpath(tempfile.mktemp())
+
+        # check if output is redirected
+        stdoutRedirected = 0
+        stderrRedirected = 0
+        for arg in args:
+            # are there more possibilities to redirect stdout ?
+            if (arg.find( ">", 0, 1 ) != -1 or
+                arg.find( "1>", 0, 2 ) != -1):
+                stdoutRedirected = 1
+            # are there more possibilities to redirect stderr ?
+            if arg.find( "2>", 0, 2 ) != -1:
+                stderrRedirected = 1
+
+        # redirect output of non-redirected streams to our tempfiles
+        if stdoutRedirected == 0:
+            args.append(">" + str(tmpFileStdout))
+        if stderrRedirected == 0:
+            args.append("2>" + str(tmpFileStderr))
+
+        # actually do the spawn
+        try:
+            args = [sh, '-c', escape(' '.join(args)) ]
+            ret = os.spawnve(os.P_WAIT, sh, args, env)
+        except OSError, e:
+            # catch any error
+            try:
+                ret = exitvalmap[e[0]]
+            except KeyError:
+                sys.stderr.write("scons: unknown OSError exception code %d - %s: %s\n" % (e[0], cmd, e[1]))
+            if stderr is not None:
+                stderr.write("scons: %s: %s\n" % (cmd, e[1]))
+        # copy child output from tempfiles to our streams
+        # and do clean up stuff
+        if stdout is not None and stdoutRedirected == 0:
+            try:
+                stdout.write(open( tmpFileStdout, "r" ).read())
+                os.remove( tmpFileStdout )
+            except (IOError, OSError):
+                pass
+
+        if stderr is not None and stderrRedirected == 0:
+            try:
+                stderr.write(open( tmpFileStderr, "r" ).read())
+                os.remove( tmpFileStderr )
+            except (IOError, OSError):
+                pass
+        return ret
+
+def exec_spawn(l, env):
+    try:
+        result = os.spawnve(os.P_WAIT, l[0], l, env)
+    except OSError, e:
+        try:
+            result = exitvalmap[e[0]]
+            sys.stderr.write("scons: %s: %s\n" % (l[0], e[1]))
+        except KeyError:
+            result = 127
+            if len(l) > 2:
+                if len(l[2]) < 1000:
+                    command = ' '.join(l[0:3])
+                else:
+                    command = l[0]
+            else:
+                command = l[0]
+            sys.stderr.write("scons: unknown OSError exception code %d - '%s': %s\n" % (e[0], command, e[1]))
+    return result
+
+def spawn(sh, escape, cmd, args, env):
+    if not sh:
+        sys.stderr.write("scons: Could not find command interpreter, is it in your PATH?\n")
+        return 127
+    return exec_spawn([sh, '-c', escape(' '.join(args))], env)
+
+def escape(arg):
+    "escape shell special characters"
+    slash = '\\'
+    special = '"$()'
+
+    arg = arg.replace(slash, slash+slash)
+    for c in special:
+        arg = arg.replace(c, slash+c)
+
+    return '"' + arg + '"'
+
+# Determine which windows CPU were running on.
+class ArchDefinition(object):
+    """
+    A class for defining architecture-specific settings and logic.
+    """
+    def __init__(self, arch, synonyms=[]):
+        self.arch = arch
+        self.synonyms = synonyms
+
+SupportedArchitectureList = [
+    ArchDefinition(
+        'x86',
+        ['i386', 'i486', 'i586', 'i686'],
+    ),
+
+    ArchDefinition(
+        'x86_64',
+        ['AMD64', 'amd64', 'em64t', 'EM64T', 'x86_64'],
+    ),
+
+    ArchDefinition(
+        'ia64',
+        ['IA64'],
+    ),
+]
+
+SupportedArchitectureMap = {}
+for a in SupportedArchitectureList:
+    SupportedArchitectureMap[a.arch] = a
+    for s in a.synonyms:
+        SupportedArchitectureMap[s] = a
+
+def get_architecture(arch=None):
+    """Returns the definition for the specified architecture string.
+
+    If no string is specified, the system default is returned (as defined
+    by the PROCESSOR_ARCHITEW6432 or PROCESSOR_ARCHITECTURE environment
+    variables).
+    """
+    if arch is None:
+        arch = os.environ.get('PROCESSOR_ARCHITEW6432')
+        if not arch:
+            arch = os.environ.get('PROCESSOR_ARCHITECTURE')
+    return SupportedArchitectureMap.get(arch, ArchDefinition('', ['']))
+
+def generate(env):
+    cmd_interp = os.path.realpath('/bin/bash.exe')
+
+    
+    if 'ENV' not in env:
+        env['ENV'] = {}
+
+    # Import things from the external environment to the construction
+    # environment's ENV.  This is a potential slippery slope, because we
+    # *don't* want to make builds dependent on the user's environment by
+    # default.  We're doing this for SystemRoot, though, because it's
+    # needed for anything that uses sockets, and seldom changes, and
+    # for SystemDrive because it's related.
+    #
+    # Weigh the impact carefully before adding other variables to this list.
+    import_env = [ 'SystemDrive', 'SystemRoot', 'TEMP', 'TMP' ]
+    for var in import_env:
+        v = os.environ.get(var)
+        if v:
+            env['ENV'][var] = v
+
+    if 'COMSPEC' not in env['ENV']:
+        v = os.environ.get("COMSPEC")
+        if v:
+            env['ENV']['COMSPEC'] = v
+
+    env.AppendENVPath('PATH', '/bin')
+    env.AppendENVPath('PATH', '/mingw/bin')
+
+    env['ENV']['PATHEXT'] = '.COM;.EXE;.BAT;.CMD'
+    env['OBJPREFIX']      = ''
+    env['OBJSUFFIX']      = '.obj'
+    env['SHOBJPREFIX']    = '$OBJPREFIX'
+    env['SHOBJSUFFIX']    = '$OBJSUFFIX'
+    env['PROGPREFIX']     = ''
+    env['PROGSUFFIX']     = '.exe'
+    env['LIBPREFIX']      = ''
+    env['LIBSUFFIX']      = '.lib'
+    env['SHLIBPREFIX']    = ''
+    env['SHLIBSUFFIX']    = '.dll'
+    env['LIBPREFIXES']    = [ '$LIBPREFIX' ]
+    env['LIBSUFFIXES']    = [ '$LIBSUFFIX' ]
+    env['PSPAWN']         = piped_spawn
+    env['SPAWN']          = spawn
+    env['SHELL']          = cmd_interp
+    env['TEMPFILE']       = TempFileMunge
+    env['TEMPFILEPREFIX'] = '@'
+    env['MAXLINELENGTH']  = 2048
+    env['ESCAPE']         = escape
+    
+    env['HOST_OS']        = 'win32'
+    env['HOST_ARCH']      = get_architecture().arch
+    
+
+# Local Variables:
+# tab-width:4
+# indent-tabs-mode:nil
+# End:
+# vim: set expandtab tabstop=4 shiftwidth=4:
